<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="https://blog.sbensu.com/" rel="self" type="application/rss+xml"/><title>sbensu</title><link>https://blog.sbensu.com/</link><description>On APIs and random things I find interesting</description><lastBuildDate>Thu, 16 Mar 2023 19:36:25 -0400</lastBuildDate><generator>clj-rss</generator><item><guid>https://blog.sbensu.com/posts/2023-03-16-api-breaking-changes/</guid><link>https://blog.sbensu.com/posts/2023-03-16-api-breaking-changes/</link><title>Breaking changes in JSON APIs</title><description>For an overall product development strategy to avoid breaking changes, see Product development for APIs: avoid braking changes.When writing graphical user interfaces, the end user is a person. If the user interface changes overnight, the user might be surprised but they can adapt and react accordingly. Most software companies are used to changing their products often in various ways. API products don’t have this luxury.</description><pubDate>Thu, 16 Mar 2023 00:00:00 -0400</pubDate></item><item><guid>https://blog.sbensu.com/posts/2023-03-16-api-product-development/</guid><link>https://blog.sbensu.com/posts/2023-03-16-api-product-development/</link><title>Product development for APIs: avoid braking changes</title><description>When writing graphical user interfaces, the end user is a person. If the user interface changes overnight, the user might be surprised but they can adapt and react accordingly. Most software companies are used to changing their products often in various ways. API products don’t have this luxury.APIs are used by programs which can’t adapt to change. So, whenever you change an API, the change should be backwards compatible so that the new API version can be used by existing integrations.  For a list of breaking changes one can make to JSON APIs, see Breaking changes in JSON APIs.</description><pubDate>Thu, 16 Mar 2023 00:00:00 -0400</pubDate></item><item><guid>https://blog.sbensu.com/posts/2023-02-04-payments-vs-transfers/</guid><link>https://blog.sbensu.com/posts/2023-02-04-payments-vs-transfers/</link><title>Payments vs Transfers</title><description>Every so often, somebody will tell me how crypto will render Visa and Mastercard obsolete. Crypto could do that one day but what we have today is not enough. Other people tell me that crypto is terrible, Visa is also terrible, and that payment fees should be absolutely zero. In both cases, when they run me through the logic, I often realize that they don't understand the difference between payments and transfers:</description><pubDate>Sat, 04 Feb 2023 00:00:00 -0500</pubDate></item><item><guid>https://blog.sbensu.com/posts/2023-01-18-high-variance-management-math/</guid><link>https://blog.sbensu.com/posts/2023-01-18-high-variance-management-math/</link><title>Math intuitions on variance</title><description>This is a supplement to High Variance Management, where I build some intuition on the different probability distributions involved. Please read that post before reading this one.The normal and Gumbel probability distributions</description><pubDate>Wed, 18 Jan 2023 00:00:00 -0500</pubDate></item><item><guid>https://blog.sbensu.com/posts/2023-01-18-high-variance-management/</guid><link>https://blog.sbensu.com/posts/2023-01-18-high-variance-management/</link><title>High Variance Management</title><description>There is a math supplement to this post where I build some intuition on the different probability distributions involved. If you are interested, read that later.Why variance matters</description><pubDate>Wed, 18 Jan 2023 00:00:00 -0500</pubDate></item><item><guid>https://blog.sbensu.com/posts/2022-01-24-apis-as-ladders/</guid><link>https://blog.sbensu.com/posts/2022-01-24-apis-as-ladders/</link><title>APIs as ladders</title><description>Developers have opinions on what a good API1 is, but rarely have a shared vocabulary to describe what makes them good. This essay puts forward one set of considerations (out of many) that we started using at Stripe in 2019 to discuss API design2. You can find some of these concepts interspersed in this excellent blogpost by Michelle Bu.The hard part of an API is not to use it, but to learn it. After learning how the API works, typing out the commands is not hard. But when you first time you encounter an API, a million questions pop into your mind: What is this object for? Is there a parameter for that? Can the API do X? Learning requires effort, but the more the developer learns, the more problems they can solve. We can imagine the developers climbing a ladder where, for every step they take up the “learning ladder”3, the more problems they can solve.</description><pubDate>Mon, 24 Jan 2022 00:00:00 -0500</pubDate></item><item><guid>https://blog.sbensu.com/posts/2021-12-13-gift-card-marketplaces/</guid><link>https://blog.sbensu.com/posts/2021-12-13-gift-card-marketplaces/</link><title>The secondary market in gift cards</title><description>This post by patio11 covers a few things that I learned working with gift cards over the years.</description><pubDate>Mon, 13 Dec 2021 00:00:00 -0500</pubDate></item></channel></rss>